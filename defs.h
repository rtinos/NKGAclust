/******************************************************************************\
*								 Definitions							 *
\******************************************************************************/
#include <iostream>
using namespace std; 


/* Data structures */
typedef int allele; 							// data structure allele
typedef struct {
			allele *chromosome;					// chromosome
			double fitness;						// fitness
} individual;
typedef struct {			
			individual *ind;
			double sum_fitness;
			double mean_fitness;
			double min_fitness;
			int best_individual;
			int pop_size;		
} population;


// Global variables
extern population popold , popnew, popwrite;		
extern int max_gen;													// maximum number of generations 
extern double *time_run;											// data to be stored
extern int *n_cross_better, *n_cross_best;							// data to be stored
extern int gen;														// generation
// Data set
extern double **X_dataset;											// dataset: inputs
extern int *d_dataset;												// dataset: desired outputs
extern int n_attrib;													//  number of atributes (dimension)
extern int lcrom;													// size of the chromosome 
// Parameters 
extern int popsize;													// size of the population 
extern int tournament_size;											// size of the pool for  tournament selection
extern int leng_local;												// number of generations to perform local search
extern double imig_ls_ratio;										// ratio between individuals generated by  local search and by imigration (if=1, all ls; if=0; all imigrants)
extern int n_runs_max;												// runs of the GA
extern float p_cross;												// crossover rate
extern int popsize ;												// size of the population 	
extern int load_initsol;											// load initial solutions from file	(0:no; 1: yes)								

/* Function declaration */
// statistics.cpp
void statistics( population *pop );
// util_functions.cpp
int *aloc_vectori(int lines);
double *aloc_vectord(int lines);
individual *aloc_vectorind(int lines);
int **aloc_matrixi(int lines , int collums);
double **aloc_matrixd(int lines , int collums);
void aloc_pop(population *pop, int n_ind);
void desaloc_matrixi(int **Matrix , int lines);
void desaloc_matrixd(double **Matrix , int lines);
void desaloc_pop( population *pop );
int random_int(int L_range, int H_range);
double random_dou(void);
void rand_perm(int *inp, int *out, int size);
void quicksort(double *v, int N);
double sqrEucDist(double **X_dataset, int i, int j, int l);
// file_man.cpp
void file_output(char *prob_name);
void read_problem(char *prob_name);
int load_popold(char *prob_name);
// selection.cpp
int selection( population *pop );

